{"version":3,"sources":["services/weatherService.js","services/locationService.js","components/Forecast.jsx","components/Weather.jsx","components/Alert.jsx","App.jsx","index.jsx"],"names":["getWeatherFromApi","a","latitude","longitude","axios","get","response","data","getCity","Forecast","forecastData","timeConverter","text","weather","main","icon","slice","temperature","Math","round","temp","dt","src","className","alt","Weather","city","current","hourly","unixTime","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","currentIcon","currentText","currentTime","align","map","f","key","Alert","message","App","useState","alert","setAlert","weatherConditions","setWeatherConditions","location","setLocation","setCity","useEffect","navigator","geolocation","getCurrentPosition","position","coords","error","newAlerts","fetchLocation","weatherService","weatherData","weatherObj","fetchWeather","locationService","fetchedCity","fetchCity","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00b9dc29.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'http://0.0.0.0:9000/api';\n\nconst getWeatherFromApi = async ({ latitude, longitude }) => {\n  const response = await axios.get(\n    `${baseURL}/weather/${latitude}/${longitude}`\n  );\n\n  return response.data;\n};\n\nexport default { getWeatherFromApi };\n","import axios from 'axios';\n\nconst baseURL = 'http://0.0.0.0:9000/api';\n\n// fetching the city of the user according to the coordinates\nconst getCity = async ({ latitude, longitude }) => {\n  const response = await axios.get(`${baseURL}/city/${latitude}/${longitude}`);\n  return response.data;\n};\n\nexport default { getCity };\n","import React from 'react';\n\nconst Forecast = ({ forecastData, timeConverter }) => {\n  const text = forecastData.weather[0].main;\n  const icon = forecastData.weather[0].icon.slice(0, -1);\n  const temperature = `${Math.round(forecastData.temp * 10) / 10} Â°C`;\n\n  return (\n    <li>\n      <p>\n        {timeConverter(forecastData.dt).slice(-5)}: {temperature} -{' '}\n        <b>{text}</b>\n      </p>\n      <img\n        src={`../img/${icon}.svg`}\n        className=\"forecastImage\"\n        alt={`Icon for \"${text}\"`}\n      />\n    </li>\n  );\n};\n\nexport default Forecast;\n","import React from 'react';\nimport Forecast from './Forecast';\n\nconst Weather = ({ city, current, hourly }) => {\n  const timeConverter = (unixTime) => {\n    const date = new Date(unixTime * 1000);\n    const months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const formattedTime = `${date.getDate()} ${\n      months[date.getMonth()]\n    } ${date.getFullYear()} - ${date.getHours()}:${\n      date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\n    }`;\n    return formattedTime;\n  };\n  const currentIcon = current.weather[0].icon.slice(0, -1);\n  const currentText = current.weather[0].main;\n  const currentTime = timeConverter(current.dt);\n  return (\n    <div>\n      <div className=\"weather\">\n        {city ? (\n          <h2>Weather conditions in {city}</h2>\n        ) : (\n          <h2>Weather conditions in your location:</h2>\n        )}\n        {currentText && (\n          <p align=\"center\">\n            {currentTime} - <b>{currentText}</b>\n          </p>\n        )}\n        {currentIcon && (\n          <img\n            src={`../img/${currentIcon}.svg`}\n            alt={`Icon for \"${currentText}\"`}\n          />\n        )}\n      </div>\n      <div className=\"forecast\">\n        <h3>Later:</h3>\n        <ul>\n          {hourly &&\n            hourly.map((f) => (\n              <Forecast\n                key={f.dt}\n                forecastData={f}\n                timeConverter={timeConverter}\n              />\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React from 'react';\n\nconst Alert = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <p className=\"alert\">{message}</p>;\n};\n\nexport default Alert;\n","import React, { useEffect, useState } from 'react';\nimport weatherService from './services/weatherService';\nimport locationService from './services/locationService';\nimport Weather from './components/Weather';\nimport Alert from './components/Alert';\n\nconst App = () => {\n  const [alert, setAlert] = useState(null);\n  const [weatherConditions, setWeatherConditions] = useState({});\n  const [location, setLocation] = useState({});\n  const [city, setCity] = useState('...');\n\n  useEffect(() => {\n    const fetchLocation = async () => {\n      /* eslint-disable-next-line no-undef */\n      if (!navigator.geolocation) {\n        const newAlert = 'Geolocation is not supported by your browser';\n        setAlert(newAlert);\n      } else {\n        /* eslint-disable-next-line no-undef */\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            setLocation({\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n            });\n          },\n          (error) => {\n            const newAlerts = `Enable location to use the service. Error: ${error.message}`;\n            setAlert(newAlerts);\n          }\n        );\n      }\n    };\n    fetchLocation();\n  }, []);\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      if (location.latitude && location.longitude) {\n        try {\n          const weatherData = await weatherService.getWeatherFromApi(location);\n          const weatherObj = {\n            current: weatherData.current,\n            hourly: weatherData.hourly,\n          };\n          setWeatherConditions(weatherObj);\n          setAlert(null);\n        } catch (error) {\n          setAlert(`Backend error occurred: ${error.message}`);\n        }\n      }\n    };\n    fetchWeather();\n  }, [location]);\n\n  useEffect(() => {\n    const fetchCity = async () => {\n      if (location.latitude && location.longitude) {\n        try {\n          const fetchedCity = (await locationService.getCity(location)).city;\n          setCity(fetchedCity);\n        } catch (error) {\n          setCity(null);\n        }\n      }\n    };\n    fetchCity();\n  }, [weatherConditions]);\n\n  return (\n    <div>\n      {alert && <Alert message={alert} />}\n      {location.latitude && location.longitude && weatherConditions.current ? (\n        <Weather\n          location={location}\n          city={city}\n          current={weatherConditions.current}\n          hourly={weatherConditions.hourly}\n        />\n      ) : !alert ? (\n        <h2>Please wait...</h2>\n      ) : (\n        <h2>Unable to continue to the service.</h2>\n      )}\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('app'));\n"],"sourceRoot":""}